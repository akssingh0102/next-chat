// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  chats     Chat[]    @relation("UserChats")
  messages  Message[] @relation("UserMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Chat {
  id           Int       @id @default(autoincrement())
  messages     Message[] @relation("ChatMessages")
  participants User[]    @relation("UserChats") // many-to-many relation with users
  isGroup      Boolean   @default(false) // flag to differentiate group chats
  groupName    String? // optional, only for group chats
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  Int
  createdAt DateTime @default(now())
}

model UserChat {
  userId Int
  chatId Int

  @@id([userId, chatId])
  @@map("user_chats")
}
